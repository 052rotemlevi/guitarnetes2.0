name: New Release + Promote app + Build images

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Type of version increment to apply (major, minor, patch)'
        required: true
        default: 'patch'
      promote-echo-server:
        description: 'Promote Echo Server?'
        required: true
        type: boolean
      promote-frontend:
        description: 'Promote Frontend?'
        required: true
        type: boolean

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set up JQ
        run: sudo apt-get install jq

      - name: Set matrix
        id: set-matrix
        run: |
          services=()
          paths=()
          if [ "${{ github.event.inputs.promote-echo-server }}" == "true" ]; then
            services+=("echo-server")
            paths+=("app/echo-server")
          fi
          if [ "${{ github.event.inputs.promote-frontend }}" == "true" ]; then
            services+=("frontend")
            paths+=("app/frontend")
          fi

          # Create JSON matrix
          matrix=$(jq -n --argjson services "$(printf '%s\n' "${services[@]}" | jq -R . | jq -s .)" --argjson paths "$(printf '%s\n' "${paths[@]}" | jq -R . | jq -s .)" -c '{ "include": [ { "service_name": $services[], "service_path": $paths[] } ] }')
          echo "matrix=${matrix}" > matrix.json
          echo "::set-output name=matrix::$(cat matrix.json)"

  promote-and-build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Promote and Build
        uses: ./.github/workflows/promote-build.yml
        with:
          service-name: ${{ matrix.service_name }}
          version-type: ${{ github.event.inputs.version-type }}
          service-path: ${{ matrix.service_path }}

  create-release:
    needs: promote-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Create GitHub Release
        if: ${{ github.event.inputs.version-type == 'minor' || github.event.inputs.version-type == 'major' }}
        run: |
          sudo apt-get install -y gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh release create ${{ env.new_version }} --title "Release ${{ env.new_version }}" --notes "## Changes in this release\n\n- Version update to ${{ env.new_version }}"
