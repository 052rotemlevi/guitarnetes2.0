name: Promote Microservice/app

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      version-type:
        required: true
        type: string
      service-path:
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper rebase and push

      - name: Set up Git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Upgrade version
        id: upgrade_version 
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          
          # Pull latest changes to ensure no conflicts
          git pull origin $current_branch

          VERSION_FILE="${{ inputs.service-path }}/version.txt"
          if [ ! -f "$VERSION_FILE" ]; then
            echo "Version file not found: $VERSION_FILE"
            exit 1
          fi
          echo "current version is $(cat $VERSION_FILE)"

          currentVersion=$(cat $VERSION_FILE)

          # Extract the major, minor, and patch components
          IFS='.' read -r -a versionArray <<< "$currentVersion"
          major="${versionArray[0]}"
          minor="${versionArray[1]}"
          patch="${versionArray[2]}"

          VERSION_TYPE="${{ inputs.version-type }}"

          case $VERSION_TYPE in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          # Form the new version string
          newVersion="$major.$minor.$patch"

          # Update the version in the file
          echo "$newVersion" > $VERSION_FILE
          echo "New version is $newVersion"
          

          # Set the new version in the output
          echo "new_version=$newVersion" >> $GITHUB_ENV


          # Commit the changes
          git add $VERSION_FILE
          git commit -m "Upgrade version to $newVersion"

          # Get the current branch name
          current_branch=$(git rev-parse --abbrev-ref HEAD)
          

          # Push the changes to the current branch
          git push origin $current_branch

