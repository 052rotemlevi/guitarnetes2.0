name: New Release

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Type of version increment to apply (major, minor, patch)'
        required: true
        default: 'patch'
      promote-echo-server:
        description: 'Promote Echo Server?'
        required: true
        type: boolean
      promote-frontend:
        description: 'Promote Frontend?'
        required: true
        type: boolean
      build-microservices:
        description: 'Build new Docker images?'
        required: true
        type: boolean

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  VERSION_FILE: ./app/version.txt

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
  promote-app:
      uses: ./.github/workflows/promote.yml
      with:
        service-name: app
        version-type: ${{ github.event.inputs.version-type }}
        service-path: ./app

  get-new-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set version
        id: set_version
        run: |
          VERSION=$(cat ${{ env.VERSION_FILE }})
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version set to: $VERSION"

  promote-echo-server:
    if: ${{ github.event.inputs.promote-echo-server == 'true' }}
    needs: promote-app
    uses: ./.github/workflows/promote.yml
    with:
      service-name: echo-server
      version-type: ${{ github.event.inputs.version-type }}
      service-path: ./app/echo-server

  promote-frontend:
    if: ${{ github.event.inputs.promote-frontend == 'true' }}
    needs: promote-app
    uses: ./.github/workflows/promote.yml
    with:
      service-name: frontend
      version-type: ${{ github.event.inputs.version-type }}
      service-path: ./app/frontend

  build-microservices:
    if: ${{ github.event.inputs.build-microservices == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [echo-server, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Read version
        id: version
        run: echo "VERSION=$(cat ./app/${{ matrix.service }}/version.txt)" >> $GITHUB_OUTPUT
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app/${{ matrix.service }}
          file: ./app/${{ matrix.service }}/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:${{ steps.version.outputs.VERSION }}
  
      - name: Debug - Print build info
        run: echo "Built and pushed ${{ matrix.service }} image with version ${{ steps.version.outputs.VERSION }}"
  
  create-release:
    runs-on: ubuntu-latest
    needs: [get-new-version, promote-echo-server, promote-frontend]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch latest changes
        run: git pull origin ${{ github.ref }}
      - name: Get current version
        run: |
          CURRENT_VERSION=$(cat ${{ env.VERSION_FILE }})
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
      - name: Create GitHub Release
        run: |
          gh release create "v$CURRENT_VERSION" \
            --title "Release $CURRENT_VERSION" \
            --notes "Version update to $CURRENT_VERSION" \
            --target ${{ github.sha }} \
            || echo "Release already exists, skipping creation"