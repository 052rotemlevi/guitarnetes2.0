name: New Release

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Type of version increment to apply (major, minor, patch)'
        required: true
        default: 'patch'
      promote-echo-server:
        description: 'Promote Echo Server?'
        required: true
        type: boolean
      promote-frontend:
        description: 'Promote Frontend?'
        required: true
        type: boolean

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  promote-echo-server:
    if: ${{ github.event.inputs.promote-echo-server }}
    uses: ./.github/workflows/promote-build.yml
    with:
      service-name: echo-server
      version-type: ${{ github.event.inputs.version-type }}
      service-path: ./app/echo-server


  promote-frontend:
    if: ${{ github.event.inputs.promote-frontend }}
    uses: ./.github/workflows/promote-build.yml
    with:
      service-name: frontend
      version-type: ${{ github.event.inputs.version-type }}
      service-path: app/frontend

  # promote-services:
  #   strategy:
  #     matrix:
  #       target: []
  #   if: ${{ github.event.inputs.promote-frontend }}
  #   uses: ./.github/workflows/promote-build.yml
  #   with:
  #     service-name: frontend
  #     version-type: ${{ github.event.inputs.version-type }}
  #     service-path: app/frontend


  BumpVersionAndCreateRelease:
    runs-on: ubuntu-latest
    needs: [promote-echo-server, promote-frontend]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bump Version
        run: |
          set -e

          # Bump the application version
          VERSION_FILE="./app/version.txt"
          if [ ! -f "$VERSION_FILE" ]; then
            echo "Version file not found: $VERSION_FILE"
            exit 1
          fi

          currentVersion=$(cat $VERSION_FILE)
          IFS='.' read -r -a versionArray <<< "$currentVersion"
          major="${versionArray[0]}"
          minor="${versionArray[1]}"
          patch="${versionArray[2]}"

          case ${{ github.event.inputs.version-type }} in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          newVersion="$major.$minor.$patch"

          echo "$newVersion" > $VERSION_FILE
          echo "new_version=$newVersion" >> $GITHUB_ENV

          git add $VERSION_FILE
          git commit -m "Bump version to $newVersion"
          git push origin HEAD:${{ github.ref }}

      - name: Create GitHub Release
        if: success()
        run: |
          sudo apt-get install -y gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh release create $newVersion -t $newVersion --title "Release $newVersion" --notes "## Changes in this release\n\n- Version update to $newVersion" --target $newVersion